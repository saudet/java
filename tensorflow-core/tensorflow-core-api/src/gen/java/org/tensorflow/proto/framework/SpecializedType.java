// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/types.proto

package org.tensorflow.proto.framework;

/**
 * <pre>
 * For identifying the underlying type of a variant. For variants, the types
 * listed here are a subset of the types in the variant type registry,
 * corresponding to commonly used variants which must occasionally be
 * special-cased.
 * </pre>
 *
 * Protobuf enum {@code tensorflow.SpecializedType}
 */
public enum SpecializedType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Invalid/unknown specialized type.
   * </pre>
   *
   * <code>ST_INVALID = 0;</code>
   */
  ST_INVALID(0),
  /**
   * <pre>
   * "tensorflow::TensorList" in the variant type registry.
   * </pre>
   *
   * <code>ST_TENSOR_LIST = 1;</code>
   */
  ST_TENSOR_LIST(1),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Invalid/unknown specialized type.
   * </pre>
   *
   * <code>ST_INVALID = 0;</code>
   */
  public static final int ST_INVALID_VALUE = 0;
  /**
   * <pre>
   * "tensorflow::TensorList" in the variant type registry.
   * </pre>
   *
   * <code>ST_TENSOR_LIST = 1;</code>
   */
  public static final int ST_TENSOR_LIST_VALUE = 1;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SpecializedType valueOf(int value) {
    return forNumber(value);
  }

  public static SpecializedType forNumber(int value) {
    switch (value) {
      case 0: return ST_INVALID;
      case 1: return ST_TENSOR_LIST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SpecializedType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SpecializedType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SpecializedType>() {
          public SpecializedType findValueByNumber(int number) {
            return SpecializedType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.tensorflow.proto.framework.TypesProtos.getDescriptor().getEnumTypes().get(1);
  }

  private static final SpecializedType[] VALUES = values();

  public static SpecializedType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SpecializedType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:tensorflow.SpecializedType)
}

