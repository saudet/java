// Targeted by JavaCPP version 1.5.6: DO NOT EDIT THIS FILE

package org.tensorflow.internal.c_api;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.tensorflow.internal.c_api.global.tensorflow.*;


// Information about the shape of a Tensor and its type.
@Properties(inherit = org.tensorflow.internal.c_api.presets.tensorflow.class)
public class TF_ShapeAndType extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TF_ShapeAndType() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TF_ShapeAndType(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TF_ShapeAndType(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TF_ShapeAndType position(long position) {
        return (TF_ShapeAndType)super.position(position);
    }
    @Override public TF_ShapeAndType getPointer(long i) {
        return new TF_ShapeAndType((Pointer)this).offsetAddress(i);
    }

  // Number of dimensions. -1 indicates unknown rank.
  public native int num_dims(); public native TF_ShapeAndType num_dims(int setter);
  // Array of dimensions. -1 indicates unknown dim.
  public native @Cast("int64_t*") LongPointer dims(); public native TF_ShapeAndType dims(LongPointer setter);
  // The data type. May be 0 to denote unknown type.
  public native @Cast("TF_DataType") int dtype(); public native TF_ShapeAndType dtype(int setter);
}
